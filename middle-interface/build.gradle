plugins {
//	protobuf plugin
//    It assembles the Protobuf Compiler (protoc) command line and uses it to generate Java source files out of your proto files.
//    It adds the generated Java source files to the input of the corresponding Java compilation unit (sourceSet in a Java project;),
//    so that they can be compiled along with your Java sources.
	id "com.google.protobuf" version "0.9.4"
	id 'java'
	id 'org.springframework.boot' version '3.2.11'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'maven-publish'
	id "com.github.akazver.mapstruct" version "1.0.8"
}


group = 'com.demo'
version = '0.0.1-SNAPSHOT'

//bcz when creating boot jar because some depedency there is a conflict oocuring likw
// META-INF/MANIFEST.MF is a duplicate but no duplicate handling strategy has been set.
//tasks.named('bootJar') {
//	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//}

//we need only as lib/module not for execution so no need to create executable jar
bootJar {
	enabled = false
}
jar {
	enabled =
			true
}
//publising jar to loca maven repositry
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		mavenLocal()
	}
}

//Customizing Protobuf compilation  => https://github.com/google/protobuf-gradle-plugin
protobuf {
	// Configure the protoc executable
//    By default the plugin will search for the protoc executable in the system search path.4
//    We change this and take the advantage of pre-compiled protoc that published on Maven Central

	protoc {
		// Download from repositories
		artifact = 'com.google.protobuf:protoc:4.28.3'
	}
	// Locate the codegen plugins
	plugins {
		// Locate a plugin with name 'grpc'. This step is optional.
		// If you leave it empty, it uses the current directory.
		// If you don't specify it, protoc will try to use "protoc-gen-grpc" from
		// system search path.
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.68.0'
			// or
			// path = 'tools/protoc-gen-grpc-java'
		}
	}

//    Customize code generation tasks
	generateProtoTasks {
		// all() returns the collection of all protoc tasks
		all()*.plugins {
			// Here you can configure the task
			grpc {}
		}

		// In addition to all(), you may select tasks by various criteria:
		// (Java-only) returns tasks for a sourceSet
		//ofSourceSet('main')
	}
}

//The Protobuf plugin assumes Protobuf files (.proto) are organized in the same way as Java source files, in sourceSets.
//The Protobuf files of a sourceSet are compiled in a single protoc run,
//and the generated files are added to the input of the Java compilation run of that sourceSet (or variant).
sourceSets {
	main {
		java {
//            Customizing source directories
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

//reposi	tory from where we are downloading the dependencies
repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools
	implementation 'org.springframework.boot:spring-boot-devtools:3.3.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
	implementation ('com.google.protobuf:protobuf-java:4.28.3')
	// https://mvnrepository.com/artifact/io.grpc/grpc-all
	implementation ('io.grpc:grpc-all:1.68.0')
	implementation ('javax.annotation:javax.annotation-api:1.3.2')
	// https://mvnrepository.com/artifact/org.mapstruct/mapstruct
	implementation('org.mapstruct:mapstruct:1.5.5.Final')
	// https://mvnrepository.com/artifact/org.mapstruct/mapstruct-processor
	compileOnly('org.mapstruct:mapstruct-processor:1.5.5.Final')
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.3'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation 'org.slf4j:slf4j-api:2.0.16'


}

tasks.named('test') {
	useJUnitPlatform()
}



